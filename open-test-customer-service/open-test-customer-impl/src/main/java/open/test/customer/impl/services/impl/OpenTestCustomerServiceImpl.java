package open.test.customer.impl.services.impl;

import com.google.common.collect.Lists;
import lombok.extern.slf4j.Slf4j;
import open.test.calculation.api.beans.ShoppingCart;
import open.test.calculation.api.beans.SimulationOrder;
import open.test.calculation.api.beans.SimulationResponse;
import open.test.customer.api.beans.RequestOpenTestCoupon;
import open.test.customer.api.beans.SearchOpenTestCoupon;
import open.test.customer.api.enums.OenTestCouponStatus;
import open.test.customer.dao.OpenTestCouponDao;
import open.test.customer.dao.entity.OpenTestCoupon;
import open.test.customer.impl.services.OpenTestCouponConverter;
import open.test.customer.impl.services.OpenTestCustomerService;
import open.xibu.open.test.template.api.beans.OpenTestInfo;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Example;
import org.springframework.stereotype.Service;
import org.springframework.web.reactive.function.client.WebClient;

import java.util.List;
import java.util.Optional;

/**
 * @ClassName OpenTestCustomerServiceImpl
 * @Description TODO
 * @Author xibu
 * @Date OpenTestCustomerServiceImpl 22:04
 * @Version 1.0
 **/
@Slf4j
@Service
public class OpenTestCustomerServiceImpl implements OpenTestCustomerService {

    @Autowired
    private OpenTestCouponDao openTestCouponDao;

    @Autowired
    private WebClient.Builder webClientBuilder;


    @Override
    public OpenTestCoupon requestCoupon(RequestOpenTestCoupon request) {



        return null;
    }

    @Override
    public ShoppingCart placeOrder(ShoppingCart info) {
        return null;
    }

    @Override
    public SimulationResponse simulateOrderPrice(SimulationOrder order) {
        List<OpenTestInfo> openTestCoupons = Lists.newArrayList();
        for(Long couponId : order.getCouponIDs()){
            OpenTestCoupon openTestCoupon = OpenTestCoupon.builder()
                    .userId(order.getUserId())
                    .id(couponId)
                    .status(OenTestCouponStatus.AVAILABLE)
                    .build();
            Optional<OpenTestCoupon>  optionalOpenTestCoupon = openTestCouponDao.findAll(
                    Example.of(openTestCoupon))
                    .stream().findFirst();

            if(optionalOpenTestCoupon.isPresent()){
                OpenTestCoupon openTest = optionalOpenTestCoupon.get();
                OpenTestInfo openTestInfo = OpenTestCouponConverter.convertToOpenTestCoupon(openTest);
                openTestInfo.setTemplate(loadTemplateInfo(openTest.getTemplateId()));
                openTestCoupons.add(openTestInfo);
            }

        }
        return null;
    }

    @Override
    public void deleteCoupon(Long useId, Long couponId) {

    }

    @Override
    public List<OpenTestCoupon> findCoupon(SearchOpenTestCoupon request) {
        return null;
    }

    private OpenTestC

}
