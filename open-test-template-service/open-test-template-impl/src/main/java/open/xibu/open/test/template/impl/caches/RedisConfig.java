package open.xibu.open.test.template.impl.caches;

import org.springframework.cache.CacheManager;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.data.redis.cache.RedisCacheConfiguration;
import org.springframework.data.redis.cache.RedisCacheManager;
import org.springframework.data.redis.connection.RedisConnectionFactory;
import org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer;
import org.springframework.data.redis.serializer.RedisSerializationContext;
import org.springframework.data.redis.serializer.StringRedisSerializer;

import java.time.Duration;

/**
 * @ClassName RedisConfig
 * @Description 缓存配置管理器
 * @Author xibu
 * @Date RedisConfig 15:33
 * @Version 1.0
 **/
@Configuration
public class RedisConfig {
    /**
     * desc : 配置缓存管理器
     * param factory 线程安全连接工厂
     * return 缓存管理器
     */
    @Bean
    public CacheManager cacheManager(RedisConnectionFactory factory){
        RedisCacheConfiguration cacheConfiguration = RedisCacheConfiguration.defaultCacheConfig()
                /**
                 * 设置过期时间，10分钟
                 */
                .entryTtl(Duration.ofMinutes(10))
                /**
                 * 设置缓存前缀
                 */
                .prefixKeysWith("cache:user:")
                .disableCachingNullValues()
                /**
                 * 设设置key序列化
                 */
                .serializeKeysWith(keyPair())
                /**
                 * 设置value序列化
                 */
                .serializeValuesWith(valuePair());

        RedisCacheConfiguration cacheConfiguration_ = RedisCacheConfiguration.defaultCacheConfig()
                .entryTtl(Duration.ofSeconds(30))
                .prefixCacheNameWith("cache:user_info:")
                .disableCachingNullValues()
                .serializeKeysWith((keyPair()))
                .serializeValuesWith(valuePair());
        /**
         * 返回Redis缓存管理器
         */
        return RedisCacheManager.builder(factory)
                .withCacheConfiguration("user",cacheConfiguration)
                .withCacheConfiguration("userInfo",cacheConfiguration_)
                .build();
    }

    /**
     * desc : 配置键序列化
     * param :
     * return StringRedisSerializer
     */
    private RedisSerializationContext.SerializationPair<String> keyPair(){
        return RedisSerializationContext.SerializationPair.fromSerializer(new StringRedisSerializer());
    }

    /**
     * desc : 配置值序列化，使用GenericJackson2JsonRedisSerizlizer替换默认序列化
     * param :
     * return StringRedisSerializer
     */
    private RedisSerializationContext.SerializationPair<Object> valuePair(){
        return RedisSerializationContext.SerializationPair.fromSerializer(new GenericJackson2JsonRedisSerializer());
    }
}
