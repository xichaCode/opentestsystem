package open.xibu.open.test.template.impl.service.impl;

import open.xibu.open.test.template.api.beans.User;
import open.xibu.open.test.template.api.beans.UserInfo;
import open.xibu.open.test.template.impl.service.UserInfoService;
import open.xibu.open.test.template.impl.service.UserService;
import org.springframework.beans.BeanUtils;
import org.springframework.cache.annotation.CacheConfig;
import org.springframework.cache.annotation.CacheEvict;
import org.springframework.cache.annotation.CachePut;
import org.springframework.cache.annotation.Cacheable;
import org.springframework.stereotype.Service;

import java.util.HashMap;

/**
 * @ClassName UserInfoServiceImpl
 * @Description TODO
 * @Author xibu
 * @Date UserInfoServiceImpl 16:29
 * @Version 1.0
 **/
@Service
@CacheConfig(cacheNames = "user")
public class UserServiceImpl implements UserService {

    private HashMap<String,User> userMap = new HashMap<>();
    @Override
    public void addUser(User user) {
        userMap.put(user.getUserName(),user);
    }

    @Override
    @Cacheable(key = "#userName" ,unless = "#result==null")
    public User getUserByUserName(String userName) {
        if(!userMap.containsKey(userName)){
            return null;
        }
        return userMap.get(userName);
    }

    @Override
    @CachePut(key = "#user.userName")
    public User updateUser(User user) {
        if(!userMap.containsKey(user.getUserName())){
            throw new RuntimeException("不存在此用户");
        }
        User newUser = userMap.get(user.getUserName());
        BeanUtils.copyProperties(user,newUser,"userName");
        userMap.put(newUser.getUserName(), newUser);
        return newUser;
    }

    @Override
    @CacheEvict(key = "#userName")
    public void deleteByUserName(String userName) {
        userMap.remove(userName);
    }
}
